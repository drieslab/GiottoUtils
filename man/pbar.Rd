% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/progress.R
\name{pbar}
\alias{pbar}
\title{Create a \pkg{progressr} progress tracker.}
\usage{
pbar(
  steps = length(along),
  along = NULL,
  offset = 0L,
  scale = 1L,
  transform = function(steps) scale * steps + offset,
  message = character(0L),
  label = NA_character_,
  trace = FALSE,
  initiate = TRUE,
  auto_finish = TRUE,
  on_exit = !identical(envir, globalenv()),
  enable = getOption("progressr.enable", TRUE),
  envir = parent.frame()
)
}
\arguments{
\item{steps}{(integer) Number of progressing steps.}

\item{along}{(vector; alternative) Alternative that sets
\code{steps = length(along)}.}

\item{offset, scale}{(integer; optional) scale and offset applying transform
\code{steps <- scale * steps + offset}.}

\item{transform}{(function; optional) A function that takes the effective
number of \code{steps} as input and returns another finite and non-negative
number of steps.}

\item{message}{(character vector or a function) If a character vector, then
it is pasted together into a single string using an empty separator.
If a function, then the message is constructed by \code{conditionMessage(p)}
calling this function with the progression condition \code{p} itself as the
first argument.}

\item{label}{(character) A label.}

\item{trace}{(logical) If TRUE, then the call stack is recorded, otherwise
not.}

\item{initiate}{(logical) If TRUE, the progressor will signal a
\link[progressr]{progression} 'initiate' condition when created.}

\item{auto_finish}{(logical) If TRUE, then the progressor will signal a
\link[progressr]{progression} 'finish' condition as soon as the last step has been reached.}

\item{on_exit, envir}{(logical) If TRUE, then the created progressor will
signal a \link[progressr]{progression} 'finish' condition when the calling frame exits.
This is ignored if the calling frame (\code{envir}) is the global environment.}

\item{enable}{(logical) If TRUE, \link[progressr]{progression} conditions are signaled when
calling the progressor function created by this function.
If FALSE, no \link[progressr]{progression} conditions is signaled because the progressor
function is an empty function that does nothing.}
}
\value{
a progressr progressor function
}
\description{
Create a \pkg{progressr} progress tracker. This is a wrapper around
\code{\link[progressr:progressor]{progressr::progressor()}}.
}
\examples{
a <- function(x = 10) {
    pb <- pbar(steps = x)
}

a <- function(x = seq_len(10)) {
    pb <- pbar(along = x)
}

}
\seealso{
\code{\link[=with_pbar]{with_pbar()}}
}
