% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/file_read.R
\name{dir_manifest}
\alias{dir_manifest}
\title{Generate file manifest list from a directory}
\usage{
dir_manifest(
  path = ".",
  pattern = NULL,
  all.files = FALSE,
  recursive = FALSE,
  ignore.case = FALSE,
  include.dirs = FALSE,
  no.. = FALSE,
  as.list = TRUE
)
}
\arguments{
\item{path}{a character vector of full path names; the default corresponds
to the working directory, \verb{[getwd()]}. Tilde expansion (see \link{path.expand})
and \code{\link[=normalizePath]{normalizePath()}} are performed. Missing values will be ignored.
Elements with a marked encoding  will be converted to the native encoding
(and if that fails, considered non-existent).}

\item{pattern}{an optional regular expression. Only file names which match
the regular expression will be returned.}

\item{all.files}{a logical value. If \code{FALSE}, only the names of visible
files are returned (following Unix-style visibility, that is files whose
name does not start with a dot). If \code{TRUE}, all file names will be returned.}

\item{recursive}{logical. Should the listing recurse into directories?}

\item{ignore.case}{logical. Should pattern-matching be case-insensitive?}

\item{include.dirs}{logical. Should subdirectory names be included in
recursive listings?}

\item{no..}{logical. Should both \code{"."} and \code{".."} be excluded also from
non-recursive listings?}

\item{as.list}{logical. Should output be a list or a named character vector}
}
\value{
full and normalized filepaths named by the file basename as either
a list (default) or if \code{as.list = FALSE}, a character vector.
}
\description{
Create a \code{list} of full filepaths (character) that are named
by with the respective \verb{[basename()]}. Allows easy \code{$} exploration and
indexing of items.\cr
All params are directly passed to \verb{[list.files()]} except
for \code{full.names}. \verb{[list.files()]} also normally returns both actual files
and directories when \code{recursive = FALSE}, but this function specifically
tests if items are existing files and not directories with
\code{utils::file_test(op = -f)} and fully obeys that flag in all cases.
}
\examples{
dir_manifest()
}
