% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lifecycle.R
\name{deprecate_param}
\alias{deprecate_param}
\title{Deprecate a parameter}
\usage{
deprecate_param(
  x,
  y,
  fun,
  when,
  check = c("deprecated", "null"),
  always = FALSE
)
}
\arguments{
\item{x}{name. Deprecated param}

\item{y}{name. Superceding param}

\item{fun}{character. Name of function}

\item{when}{character. Version number in which the deprecation happened.}

\item{check}{character. Method to check if deprecated param was used}

\item{always}{If FALSE, the default, will warn every 8 hours. If TRUE, will
always warn in direct usages. Indirect usages keep warning every 8 hours to
avoid disrupting users who can't fix the issue. Only use always = TRUE
after at least one release with the default.}
}
\value{
final value to be used
}
\description{
Accepts the directly passed deprecated and superceding params and
Sends a deprecation message if the deprecated param was used.
This function wraps \code{lifecycle::deprecate_warn()} to make a
standard param deprecation message. It then outputs the final value
to be used.
}
\examples{
foo <- function(dep = deprecated(), sup = 10) {
    sup <- deprecate_param(
        dep, sup, fun = "foo", when = "0.0.1"
    )
    return(sup)
}

foo() # following defaults, no deprecation message
foo(sup = 3) # no deprecation message triggered
foo(dep = 3) # deprecation message triggered

# convenient nested function when deprecating multiple params
bar <- function(dep1 = deprecated(),
                dep2 = deprecated(),
                sup1 = 10,
                sup2 = 20) {

    # internally defined function that streamlines downstream deprecations
    .dep <- function(...) {
        deprecate_param(..., fun = "bar", when = "0.0.2")
    }

    sup1 <- .dep(dep1, sup1)
    sup2 <- .dep(dep2, sup2)

    return(list(sup1, sup2))
}

bar(sup1 = 100)
bar(dep1 = 100, dep2 = "hello")

}
