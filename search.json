[{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://drieslab.github.io/GiottoUtils/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://drieslab.github.io/GiottoUtils/articles/print_formatting.html","id":"relevant-options","dir":"Articles","previous_headings":"","what":"Relevant Options","title":"","text":"","code":"options(\"giotto.verbose\") options(\"giotto.logdir\") options(\"giotto.last_logpath\")"},{"path":"https://drieslab.github.io/GiottoUtils/articles/print_formatting.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"","text":"Diagnostic prints R vital communicating users developers function may going wrong. GiottoUtils exports collection utility functions facilitate pretty printing readability. several types console printouts R. Giotto uses following types functions specific purposes: - message() - Descriptive messages function (common) - cat() print() - Diagnostic outputs, usually comments previews data - warning() - function behavior potentially problematic, given context /inputs - stop() - Error messages","code":""},{"path":"https://drieslab.github.io/GiottoUtils/articles/print_formatting.html","id":"text-formatting","dir":"Articles","previous_headings":"","what":"Text Formatting","title":"","text":"GiottoUtils::wrap_txt() can used format text wrap console size 100 char default - whichever less. New lines treated like “\\n” also applies indent lines first. function wrapped convenient print functions detailed . Base functions console prints lack text wrapping. Linebreaks also require usage “\\n” formatted expected.","code":"library(GiottoUtils) cat(wrap_txt(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\")) ## Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ##  incididunt ut labore et dolore magna aliqua. ##  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut ##  aliquip ex ea commodo consequat. # Code formatting causes \"    \" to be added the next line cat(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.     Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\") ## Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ##     Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. # Using \\n instead cat(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\") ## Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ## Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."},{"path":"https://drieslab.github.io/GiottoUtils/articles/print_formatting.html","id":"messages","dir":"Articles","previous_headings":"","what":"Messages","title":"","text":"Giotto primarily uses messages write helpful console prints. Whenever function message print, also encourage adding verbose param can turned . standard implementation looks like . GiottoUtils v0.1.1 introduces vmsg() simplifies single function without preceding statement. also applies text wrapping. Note verbose default NULL implementation since vmsg() checks default using \"giotto.verbose\" option can set globally.","code":"test_fun1 <- function(verbose = TRUE) {   if (verbose) message(\"hello world\") }  test_fun1() ## hello world test_fun2 <- function(verbose = NULL) {   vmsg(.v = verbose, \"hello world\") }  test_fun2() ## hello world"},{"path":"https://drieslab.github.io/GiottoUtils/articles/print_formatting.html","id":"debug-messages","dir":"Articles","previous_headings":"Messages","what":"Debug messages","title":"","text":"vmsg() also provides modes prints. debugging purposes, can helpful include abstract wordy printouts messages every successful step. can included flagging \"debug\"","code":"test_debug <- function(verbose = NULL) {   vmsg(.v = verbose, .is_debug = TRUE, \"this is a debug statement\")   vmsg(.v = verbose, \"this is a normal message\") }  test_debug(verbose = TRUE) ## this is a normal message test_debug(verbose = \"debug\") ## this is a debug statement ## this is a normal message"},{"path":"https://drieslab.github.io/GiottoUtils/articles/print_formatting.html","id":"logging-messages","dir":"Articles","previous_headings":"Messages","what":"Logging messages","title":"","text":"cases record messages helpful, preferred nothing actually printed console, vmsg() also supports writing logfile. can done passing either \"log\" \"log_debug\" desired level verbosity verbose param \"giotto.verbose\" option. logfile defaults created tempdir(), can set directory choice using \"giotto.logdir\" option. specific path logfile stored within \"giotto.last_logpath\". read log items, use giottoReadLog(). can start new logfile using giottoNewLog()","code":"vmsg(.v = \"log\", \"Write this to a logfile in tempdir\") ## Logging to:/tmp/RtmpU0BDqA/giotto_20240105_1.txt giottoReadLog() ## [1] \" (2024-01-05 13:44:29) Write this to a logfile in tempdir\""},{"path":"https://drieslab.github.io/GiottoUtils/articles/print_formatting.html","id":"errors","dir":"Articles","previous_headings":"","what":"Errors","title":"","text":"modularization Giotto v4.0.0, can hard find module specific error came . .gstop() error handling internal function within modules seeks solve . function pre-pend module error happened . also provides .n param allows developers specify many stackframes back error reported .","code":"foo <- function(x, y) {   GiottoUtils:::.gstop(\"This is an error.\") }  bar <- function() {   foo(1,2) }  bar() ## Error: [GiottoUtils] foo(1, 2): ##  This is an error. foo <- function(x, y) {   GiottoUtils:::.gstop(\"This is an error.\", .n = 2) # report from one stackframe back }  bar() ## Error: [GiottoUtils] bar(): ##  This is an error."},{"path":"https://drieslab.github.io/GiottoUtils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruben Dries. Author, maintainer. Jiaji George Chen. Author. Guo-Cheng Yuan. Author. Matthew O'Brien. Author. Joselyn C. Chávez-Fuentes. Author. Edward Ruiz. Author.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dries R, George Chen J, Yuan G, O'Brien M, Chávez-Fuentes J, Ruiz E (2024). GiottoUtils: Giotto Suite Utilities. R package version 0.1.2, https://github.com/drieslab/Giotto, https://drieslab.github.io/GiottoUtils/, https://drieslab.github.io/Giotto/.","code":"@Manual{,   title = {GiottoUtils: Giotto Suite Utilities},   author = {Ruben Dries and Jiaji {George Chen} and Guo-Cheng Yuan and Matthew O'Brien and Joselyn C. Chávez-Fuentes and Edward Ruiz},   year = {2024},   note = {R package version 0.1.2, https://github.com/drieslab/Giotto, https://drieslab.github.io/GiottoUtils/},   url = {https://drieslab.github.io/Giotto/}, }"},{"path":"https://drieslab.github.io/GiottoUtils/index.html","id":"giottoutils-","dir":"","previous_headings":"","what":"Giotto Suite Utilities","title":"Giotto Suite Utilities","text":"GiottoUtils exports functionalities called internally many packages Giotto ecosystem. range things commonly used imports pretty prints. Users need directly interact package.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Giotto Suite Utilities","text":"can install GiottoUtils like:","code":"library(devtools) devtools::install_github('drieslab/GiottoUtils')"},{"path":"https://drieslab.github.io/GiottoUtils/reference/check_github_suite_ver.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for updates to Giotto Suite — check_github_suite_ver","title":"Check for updates to Giotto Suite — check_github_suite_ver","text":"Checks Giotto Suite github repository compares version number currently installed.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/check_github_suite_ver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for updates to Giotto Suite — check_github_suite_ver","text":"","code":"check_github_suite_ver(pkg = \"Giotto\")"},{"path":"https://drieslab.github.io/GiottoUtils/reference/check_github_suite_ver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for updates to Giotto Suite — check_github_suite_ver","text":"pkg character. Package check (pattern matches)","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/color_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorize print text — color_tag","title":"Colorize print text — color_tag","text":"Return list 8 formatting tags ansi colored text","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/color_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorize print text — color_tag","text":"","code":"color_tag()  color_red(x)  color_green(x)  color_yellow(x)  color_blue(x)  color_purple(x)  color_teal(x)  use_color_text()  ansi_colors()  is_emacs_with_color()  emacs_version()"},{"path":"https://drieslab.github.io/GiottoUtils/reference/color_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colorize print text — color_tag","text":"named list characters","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/color_tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colorize print text — color_tag","text":"supported colors checking modified cli aab-num-ansi-colors.R","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/color_tag.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Colorize print text — color_tag","text":"use_color_text(): Determine system print color ansi_colors(): Determine system can print least 8 colors is_emacs_with_color(): Determine emacs can print color emacs_version(): Determine emacs version","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Radian/degree conversions — degrees","title":"Radian/degree conversions — degrees","text":"Convert radians degrees vice versa","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radian/degree conversions — degrees","text":"","code":"radians(deg)  degrees(rad)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radian/degree conversions — degrees","text":"deg degrees rad radians","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/degrees.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Radian/degree conversions — degrees","text":"radians(): Degrees radians degrees(): Radians degrees","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/degrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radian/degree conversions — degrees","text":"","code":"radians(180) #> [1] 3.141593 degrees(pi) #> [1] 180"},{"path":"https://drieslab.github.io/GiottoUtils/reference/depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Find depth of subnesting — depth","title":"Find depth of subnesting — depth","text":"Recursively determines many max min layers subnesting , end object (defined param sig list length 0) layer 0","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find depth of subnesting — depth","text":"","code":"depth(this, method = c(\"max\", \"min\"), sig = \"data.frame\")"},{"path":"https://drieslab.github.io/GiottoUtils/reference/depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find depth of subnesting — depth","text":"object evaluate method max (default) min nesting detect sig signature class check . Default 'data.frame'","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/depth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find depth of subnesting — depth","text":"https://stackoverflow.com/questions/13432863/determine-level--nesting--r","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/determine_cores.html","id":null,"dir":"Reference","previous_headings":"","what":"determine_cores — determine_cores","title":"determine_cores — determine_cores","text":"guesses many cores use","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/determine_cores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"determine_cores — determine_cores","text":"","code":"determine_cores(   cores = getOption(\"giotto.cores\", default = NA),   min_cores = 1,   max_cores = 10 )"},{"path":"https://drieslab.github.io/GiottoUtils/reference/determine_cores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"determine_cores — determine_cores","text":"numeric","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_conn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a logfile connection — .log_conn","title":"Create a logfile connection — .log_conn","text":"Create active file connection object logfile write . Opens mode \"+\" allows appending reading.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_conn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a logfile connection — .log_conn","text":"","code":".log_conn(filepath = getOption(\"giotto.last_logpath\", NULL))"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_conn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a logfile connection — .log_conn","text":"filepath path logfile","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a log file — .log_create","title":"Create a log file — .log_create","text":"Creates file called 'log.txt' specified directory. directory provided, defaults tempdir(), specific one can provided setting \"giotto.logdir\" option using .log_dir(). filepath additionally written option 'giotto.last_logpath'.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a log file — .log_create","text":"","code":".log_create(filedir = getOption(\"giotto.logdir\", tempdir()))"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a log file — .log_create","text":"filedir character. Directory create logfile","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Giotto logging directory — .log_dir","title":"Giotto logging directory — .log_dir","text":"Set Giotto logging directory. New logfiles generated .","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Giotto logging directory — .log_dir","text":"","code":".log_dir(logdir = tempdir())"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dot-log_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Giotto logging directory — .log_dir","text":"logdir character. Directory log (defaults tempdir)","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_dcast_string.html","id":null,"dir":"Reference","previous_headings":"","what":"dt_dcast_string — dt_dcast_string","title":"dt_dcast_string — dt_dcast_string","text":"Data.table dcast using character inputs formula","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_dcast_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dt_dcast_string — dt_dcast_string","text":"","code":"dt_dcast_string(data, col_name1, col_name2, value.var)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_dcast_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dt_dcast_string — dt_dcast_string","text":"data data.table col_name1 character. LHS cast formula col_name2 character. RHS cast formula value.var character. Name column whose values filled cast.","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_dcast_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dt_dcast_string — dt_dcast_string","text":"","code":"library(data.table) ChickWeight = as.data.table(ChickWeight) setnames(ChickWeight, tolower(names(ChickWeight))) DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table  dt_dcast_string(DT, 'chick', 'time', 'value') #>     chick  0  2  4  6   8  10  12  14  16  18  20  21 #>  1:    18 39 35 NA NA  NA  NA  NA  NA  NA  NA  NA  NA #>  2:    16 41 45 49 51  57  51  54  NA  NA  NA  NA  NA #>  3:    15 41 49 56 64  68  68  67  68  NA  NA  NA  NA #>  4:    13 41 48 53 60  65  67  71  70  71  81  91  96 #>  5:     9 42 51 59 68  85  96  90  92  93 100 100  98 #>  6:    20 41 47 54 58  65  73  77  89  98 107 115 117 #>  7:    10 41 44 52 63  74  81  89  96 101 112 120 124 #>  8:     8 42 50 61 71  84  93 110 116 126 134 125  NA #>  9:    17 42 51 61 72  83  89  98 103 113 123 133 142 #> 10:    19 43 48 55 62  65  71  82  88 106 120 144 157 #> 11:     4 42 49 56 67  74  87 102 108 136 154 160 157 #> 12:     6 41 49 59 74  97 124 141 148 155 160 160 157 #> 13:    11 43 51 63 84 112 139 168 177 182 184 181 175 #> 14:     3 43 39 55 67  84  99 115 138 163 187 198 202 #> 15:     1 42 51 59 64  76  93 106 125 149 171 199 205 #> 16:    12 41 49 56 62  72  88 119 135 162 185 195 205 #> 17:     2 40 49 58 72  84 103 122 138 162 187 209 215 #> 18:     5 41 42 48 60  79 106 141 164 197 199 220 223 #> 19:    14 41 49 62 79 101 128 164 192 227 248 259 266 #> 20:     7 41 49 57 71  89 112 146 174 218 250 288 305 #> 21:    24 42 52 58 74  66  68  70  71  72  72  76  74 #> 22:    30 42 48 59 72  85  98 115 122 143 151 157 150 #> 23:    22 41 55 64 77  90  95 108 111 131 148 164 167 #> 24:    23 43 52 61 73  90 103 127 135 145 163 170 175 #> 25:    27 39 46 58 73  87 100 115 123 144 163 185 192 #> 26:    28 39 46 58 73  92 114 145 156 184 207 212 233 #> 27:    26 42 48 57 74  93 114 136 147 169 205 236 251 #> 28:    25 40 49 62 78 102 124 146 164 197 231 259 265 #> 29:    29 39 48 59 74  87 106 134 150 187 230 279 309 #> 30:    21 40 50 62 86 125 163 217 240 275 307 318 331 #> 31:    33 39 50 63 77  96 111 137 144 151 146 156 147 #> 32:    37 41 48 56 68  80  83 103 112 135 157 169 178 #> 33:    36 39 48 61 76  98 116 145 166 198 227 225 220 #> 34:    31 42 53 62 73  85 102 123 138 170 204 235 256 #> 35:    39 42 50 61 78  89 109 130 146 170 214 250 272 #> 36:    38 41 49 61 74  98 109 128 154 192 232 280 290 #> 37:    32 41 49 65 82 107 129 159 179 221 263 291 305 #> 38:    40 41 55 66 79 101 120 154 182 215 262 295 321 #> 39:    34 41 49 63 85 107 134 164 186 235 294 327 341 #> 40:    35 41 53 64 87 123 158 201 238 287 332 361 373 #> 41:    44 42 51 65 86 103 118 127 138 145 146  NA  NA #> 42:    45 41 50 61 78  98 117 135 141 147 174 197 196 #> 43:    43 42 55 69 96 131 157 184 188 197 198 199 200 #> 44:    41 42 51 66 85 103 124 155 153 175 184 199 204 #> 45:    47 41 53 66 79 100 123 148 157 168 185 210 205 #> 46:    49 40 53 64 85 108 128 152 166 184 203 233 237 #> 47:    46 40 52 62 82 101 120 144 156 173 210 231 238 #> 48:    50 41 54 67 84 105 122 155 175 205 234 264 264 #> 49:    42 42 49 63 84 103 126 160 174 204 234 269 281 #> 50:    48 39 50 62 80 104 125 154 170 222 261 303 322 #>     chick  0  2  4  6   8  10  12  14  16  18  20  21"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_remove_na.html","id":null,"dir":"Reference","previous_headings":"","what":"dt_remove_na — dt_remove_na","title":"dt_remove_na — dt_remove_na","text":"set NA values 0 data.table object","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_remove_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dt_remove_na — dt_remove_na","text":"","code":"dt_remove_na(DT)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_remove_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dt_remove_na — dt_remove_na","text":"DT datatable","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_set_row_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Set specific data.table row order — dt_set_row_order","title":"Set specific data.table row order — dt_set_row_order","text":"Set specific data.table row order","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_set_row_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set specific data.table row order — dt_set_row_order","text":"","code":"dt_set_row_order(x, neworder)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_set_row_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set specific data.table row order — dt_set_row_order","text":"x data.table neworder numerical vector reorder rows","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_sort_combine_two_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"dt_sort_combine_two_columns — dt_sort_combine_two_columns","title":"dt_sort_combine_two_columns — dt_sort_combine_two_columns","text":"fast sorting pasting 2 character columns data.table","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_sort_combine_two_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dt_sort_combine_two_columns — dt_sort_combine_two_columns","text":"","code":"dt_sort_combine_two_columns(DT, column1, column2, myname = \"unif_gene_gene\")"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_sort_combine_two_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dt_sort_combine_two_columns — dt_sort_combine_two_columns","text":"DT datatable column1 column1 use column2 column2 use myname name combined column generate","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"dt_to_matrix — dt_to_matrix","title":"dt_to_matrix — dt_to_matrix","text":"converts data.table matrix","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dt_to_matrix — dt_to_matrix","text":"","code":"dt_to_matrix(x)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/dt_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dt_to_matrix — dt_to_matrix","text":"x data.table object","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/file_extention.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file extention — file_extention","title":"Get file extention — file_extention","text":"Get file extention provided filepath","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/file_extention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file extention — file_extention","text":"","code":"file_extension(file)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/file_extention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file extention — file_extention","text":"file character. Filepath","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/fread_colmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fread specific rows based on column matches — fread_colmatch","title":"Fread specific rows based on column matches — fread_colmatch","text":"Fread specific rows based column matches","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/fread_colmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fread specific rows based on column matches — fread_colmatch","text":"","code":"fread_colmatch(file, col, sep = NULL, values_to_match, verbose = FALSE, ...)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/fread_colmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fread specific rows based on column matches — fread_colmatch","text":"file path file load col name col match sep grep term match column delimiters within file values_to_match values col match given vector verbose whether print grep command ... additional parameters pass fread","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/g_assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion framework — g_assert","title":"Assertion framework — g_assert","text":"Framework perform assertions provide informative errors input object test performed. Functions specific checks messages can built using base function.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/g_assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion framework — g_assert","text":"","code":"g_assert(x, test, msg = NULL, n = 2L, ...)  assert_giotto(gobject, n = 1L, ...)  assert_dt(x)  assert_file(x)  assert_numeric(x)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/g_assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion framework — g_assert","text":"x object test test test perform TRUE FALSE outcome msg error message provided character vector. Using token .name send name object tested stack frame referenced n n stack frames back evaluate param ... additional params pass gobject giotto object","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/g_assert.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Assertion framework — g_assert","text":"assert_giotto(): Test whether supplied object giotto object assert_dt(): Test whether input data.table object assert_file(): Test whether input existing file assert_numeric(): Test whether input class numeric","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/g_assert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assertion framework — g_assert","text":"","code":"if (FALSE) { g_assert(   x,   test = inherits(x, \"data.table\"),   msg = c(.name, \"must be of class data.table, not\", class(x)) ) }"},{"path":"https://drieslab.github.io/GiottoUtils/reference/g_match_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial matching of character choices — g_match_arg","title":"Partial matching of character choices — g_match_arg","text":"Given arg match , tries partially match provided characeter vector choices. Matching ignores case returns first match.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/g_match_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial matching of character choices — g_match_arg","text":"","code":"g_match_arg(arg, choices, ...)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/g_match_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial matching of character choices — g_match_arg","text":"arg character. Argument match choices character vector choices match ... additional params passed grep","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/getDistinctColors.html","id":null,"dir":"Reference","previous_headings":"","what":"getDistinctColors — getDistinctColors","title":"getDistinctColors — getDistinctColors","text":"Returns number distinct colors based RGB scale","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/getDistinctColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDistinctColors — getDistinctColors","text":"","code":"getDistinctColors(n)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/getDistinctColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDistinctColors — getDistinctColors","text":"n number colors wanted","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/getDistinctColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDistinctColors — getDistinctColors","text":"character vector hexadecimal distinct colors","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/reference/getMonochromeColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Create color scaling for a single color starting from black — getMonochromeColors","title":"Create color scaling for a single color starting from black — getMonochromeColors","text":"Create color scaling single color starting black","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/getMonochromeColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create color scaling for a single color starting from black — getMonochromeColors","text":"","code":"getMonochromeColors(col, n = 256L, ...)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/getMonochromeColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create color scaling for a single color starting from black — getMonochromeColors","text":"col hexadecimal color scale scale towards n number colors request monochrome palette ... Arguments passed grDevices::colorRampPalette","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/reference/getRainbowColors.html","id":null,"dir":"Reference","previous_headings":"","what":"getRainbowColors — getRainbowColors","title":"getRainbowColors — getRainbowColors","text":"Returns number rainbow colors spaced around spectrum. 100 unique colors supplied recycled.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/getRainbowColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getRainbowColors — getRainbowColors","text":"","code":"getRainbowColors(n)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/getRainbowColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getRainbowColors — getRainbowColors","text":"n number colors wanted","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/getRainbowColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getRainbowColors — getRainbowColors","text":"character vector hexadecimal rainbow colors","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/reference/get_os.html","id":null,"dir":"Reference","previous_headings":"","what":"get_os — get_os","title":"get_os — get_os","text":"return type operating system, see https://conjugateprior.org/2015/06/identifying--os--r/","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/get_os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_os — get_os","text":"","code":"get_os()"},{"path":"https://drieslab.github.io/GiottoUtils/reference/get_os.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_os — get_os","text":"character osx, linux windows","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/giottoNewLog.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Giotto log — giottoNewLog","title":"Create a new Giotto log — giottoNewLog","text":"Create new Giotto log","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/giottoNewLog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Giotto log — giottoNewLog","text":"","code":"giottoNewLog(logdir)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/giottoNewLog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Giotto log — giottoNewLog","text":"logdir (optional) specific directory generate logfiles. provided, choose directory based getOption(\"giotto.logdir\", tempdir())","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/giottoReadLog.html","id":null,"dir":"Reference","previous_headings":"","what":"Read from the last generated log file — giottoReadLog","title":"Read from the last generated log file — giottoReadLog","text":"Read last generated log file","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/giottoReadLog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read from the last generated log file — giottoReadLog","text":"","code":"giottoReadLog(filepath = getOption(\"giotto.last_logpath\", NULL))"},{"path":"https://drieslab.github.io/GiottoUtils/reference/giottoReadLog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read from the last generated log file — giottoReadLog","text":"filepath character. filepath log file. omitted, tries find last created log (work crash)","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/gstop.html","id":null,"dir":"Reference","previous_headings":"","what":"Module-specific error message — gstop","title":"Module-specific error message — gstop","text":"Send error message formatted wrap_txt(). Prepends Giotto module error triggered. function used directly, instead internal .gstop() function created using framework module using . .n param incremented 2L wrapper function","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/gstop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module-specific error message — gstop","text":"","code":"gstop(   ...,   sep = \" \",   strWidth = 100,   errWidth = FALSE,   .module,   .prefix = \" \",   .initial = \"\",   .n = 1L,   .call = TRUE,   .warn_nstack = getOption(\"giotto.warn_gstop_nstack\", FALSE) )"},{"path":"https://drieslab.github.io/GiottoUtils/reference/gstop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module-specific error message — gstop","text":"... additional strings /elements pass wrap_msg sep join elements string (default one space) strWidth externally set wrapping width. (default value 100 effected) errWidth default = FALSE. Set strWidth compatible error printout .module character. Giotto module send error .prefix character. prefix later lines .initial character. prefix first line .n stack frames back error happened .call logical, whether include call selected .n location error . Default TRUE .warn_nstack logica. whether warn insufficient stackframes requested .n (default = FALSE)","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/is_empty_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if missing or empty character — is_empty_char","title":"Test if missing or empty character — is_empty_char","text":"Convenient function test character input NULL, missing, length 0 (empty)","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/is_empty_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if missing or empty character — is_empty_char","text":"","code":"is_empty_char(x)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/lapply_flex.html","id":null,"dir":"Reference","previous_headings":"","what":"lapply_flex — lapply_flex","title":"lapply_flex — lapply_flex","text":"lapply_flex","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/lapply_flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lapply_flex — lapply_flex","text":"","code":"lapply_flex(X, FUN, cores = NA, future.seed = TRUE, fun = NULL, ...)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/lapply_flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lapply_flex — lapply_flex","text":"X list use FUN function performed cores cores use future.seed whether set seed using future_lapply fun deprecated. Backwards compatibility FUN ... arguments pass","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/lifecycle_badge.html","id":null,"dir":"Reference","previous_headings":"","what":"lifecycle badge — lifecycle_badge","title":"lifecycle badge — lifecycle_badge","text":"Generate markdown needed lifecycle badges help communicate stability functions documentation added backticks shown .","code":"#' `r lifecycle::badge(\"experimental\")`  #' `r lifecycle::badge(\"deprecated\")`  #' `r lifecycle::badge(\"superseded\")`"},{"path":"https://drieslab.github.io/GiottoUtils/reference/lifecycle_badge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lifecycle badge — lifecycle_badge","text":"","code":"lifecycle_badge(stage = \"stable\")"},{"path":"https://drieslab.github.io/GiottoUtils/reference/lifecycle_badge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lifecycle badge — lifecycle_badge","text":"stage character. 'stable', 'experimental', 'deprecated', 'superseded'","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/reference/list_element_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if list element exists — list_element_exists","title":"Test if list element exists — list_element_exists","text":"Test nth element list exists","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/list_element_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if list element exists — list_element_exists","text":"","code":"list_element_exists(x, index)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/list_element_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if list element exists — list_element_exists","text":"x list index element index","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/list_element_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if list element exists — list_element_exists","text":"boolean","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/log_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write to log file — log_write","title":"Write to log file — log_write","text":"Write log file","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/log_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write to log file — log_write","text":"","code":"log_write(file_conn = .log_conn(), x = \"\", collapse = \" \", main = NULL)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/log_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write to log file — log_write","text":"file_conn file connection (Uses last created generates new one previous exist.) x character vector. Content write collapse character. Collapse use x main character. Title assign log entry","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/package_check.html","id":null,"dir":"Reference","previous_headings":"","what":"package_check — package_check","title":"package_check — package_check","text":"check package available provide installation instruction available","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/package_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"package_check — package_check","text":"","code":"package_check(   pkg_name,   repository = c(\"CRAN\", \"Bioc\", \"github\", \"pip\"),   github_repo = NULL,   optional = FALSE,   custom_msg = NULL )"},{"path":"https://drieslab.github.io/GiottoUtils/reference/package_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"package_check — package_check","text":"pkg_name name package repository package github_repo name github repository needed optional whether package optional. stop() used TRUE message() sent FALSE. custom_msg custom message sent instead default error message","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"See magrittr::%>% for details. — %>%","title":"See magrittr::%>% for details. — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See magrittr::%>% for details. — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://drieslab.github.io/GiottoUtils/reference/prev_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous calls — prev_call","title":"Previous calls — prev_call","text":"Functions check call stack get aspects previous calls. Used putting together object histories error handling.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/prev_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous calls — prev_call","text":"","code":"get_prev_call(toplevel = 1L)  get_prev_fname(toplevel = 3L)  get_args(toplevel = 2L, verbose = FALSE)  get_args_list(toplevel = 1L, ...)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/prev_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Previous calls — prev_call","text":"toplevel integer. Relative stack function call made. verbose verbose ... additional params capture","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/prev_call.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Previous calls — prev_call","text":"get_prev_call(): Get previous call get_prev_fname(): Get previous call function name get_args(): Get previous call args named character vector get_args_list(): Get call args named list","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/random_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a random seed — random_seed","title":"Set a random seed — random_seed","text":"reproducible package, set.randomseed() Convenient function applying random seed. Usually used .exit() specified seed applied non-random operations interfere aspects user's work. May also called set.seed = TRUE simply return random seed use, without actually applied .","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/random_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a random seed — random_seed","text":"","code":"random_seed(set.seed = TRUE)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/random_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a random seed — random_seed","text":"set.seed Whether apply random seed. Defaults TRUE","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/random_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a random seed — random_seed","text":"seed value returned invisibly","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. lifecycle deprecate_soft, deprecate_stop, deprecate_warn, deprecated, is_present","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/reference/require_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to AT LEAST specified nesting depth — require_depth","title":"Coerce to AT LEAST specified nesting depth — require_depth","text":"Coerce LEAST specified nesting depth","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/require_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to AT LEAST specified nesting depth — require_depth","text":"","code":"require_depth(x, dnames = NULL, min_depth = 1L, count = 1L)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/require_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to AT LEAST specified nesting depth — require_depth","text":"x object evaluate dnames character. vector names apply per depth level already named name entries match depth intended . NULL values min_depth required minimum nesting depth ignored. count use","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/special_characters.html","id":null,"dir":"Reference","previous_headings":"","what":"Special characters — special_characters","title":"Special characters — special_characters","text":"Framework functions printing special characters within R packages.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/special_characters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special characters — special_characters","text":"","code":"is_latex_output()  is_utf8_output()  box_chars()"},{"path":"https://drieslab.github.io/GiottoUtils/reference/special_characters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Special characters — special_characters","text":"Much inspiration taken fs tree.R derived : code","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/special_characters.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Special characters — special_characters","text":"is_latex_output(): Determine print latex output is_utf8_output(): Determine system using UTF-8 encoding box_chars(): Helper function print unicode box characters using escape codes.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/str_convenience.html","id":null,"dir":"Reference","previous_headings":"","what":"String convenience functions — str_convenience","title":"String convenience functions — str_convenience","text":"String convenience functions","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/str_convenience.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String convenience functions — str_convenience","text":"","code":"str_vector(x, qchar = c(\"single\", \"double\"))  str_bracket(x)  str_parenth(x)  str_double_quote(x)  str_quote(x)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/str_convenience.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String convenience functions — str_convenience","text":"x string item(s) format qchar quote character use. Either 'single' \"double\"","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/str_convenience.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String convenience functions — str_convenience","text":"","code":"x <- \"test\" cat(str_bracket(x), \"\\n\") #> [test]  cat(str_parenth(x), \"\\n\") #> (test)  cat(str_double_quote(x), \"\\n\") #> \"test\"  cat(str_quote(x), \"\\n\") #> 'test'   vec <- c(\"item1\", \"item2\", \"item3\") cat(str_vector(vec), \"\\n\") #> 'item1', 'item2', 'item3'  cat(str_vector(vec, qchar = \"double\")) #> \"item1\", \"item2\", \"item3\""},{"path":"https://drieslab.github.io/GiottoUtils/reference/str_locate2.html","id":null,"dir":"Reference","previous_headings":"","what":"Find location of match in string — str_locate2","title":"Find location of match in string — str_locate2","text":"Implementation stringr's str_locate base R.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/str_locate2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find location of match in string — str_locate2","text":"","code":"str_locate2(string, pattern)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/str_locate2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find location of match in string — str_locate2","text":"string Input vector. Either character vector, something coercible one. pattern Pattern look .","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/str_locate2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find location of match in string — str_locate2","text":"integer matrix two columns one row element string. first column, start, gives position start match, second column, end, gives position end.","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/time_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format time for printing — time_format","title":"Format time for printing — time_format","text":"Format time printing","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/time_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format time for printing — time_format","text":"","code":"time_format(secs)"},{"path":"https://drieslab.github.io/GiottoUtils/reference/time_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format time for printing — time_format","text":"secs numeric. seconds","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/time_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format time for printing — time_format","text":"Code timetaken","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/vmsg.html","id":null,"dir":"Reference","previous_headings":"","what":"Verbose message handler — vmsg","title":"Verbose message handler — vmsg","text":"Verbose message handler","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/vmsg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verbose message handler — vmsg","text":"","code":"vmsg(   ...,   .v = NULL,   .is_debug = FALSE,   .vopt = getOption(\"giotto.verbose\", TRUE) )"},{"path":"https://drieslab.github.io/GiottoUtils/reference/vmsg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verbose message handler — vmsg","text":"... additional strings /elements pass wrap_msg .v verbose flag pass. check options .vopt NULL (default). .is_debug flag debug print (prints .v .vopt 'debug') .vopt global verbosity option pull ","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/vmsg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verbose message handler — vmsg","text":"","code":"# common usage (.v is logical) vmsg('print me', .v = TRUE) #> print me vmsg('dont print me', .v = FALSE)  # debug messages (.v == \"debug\") # flag as a debug message using .is_debug = TRUE vmsg('I am a debug message', .is_debug = TRUE, .v = TRUE) # no print vmsg('I am a debug message', .is_debug = TRUE, .v = \"debug\") # prints #> I am a debug message  vmsg('print me', .v = 'debug') # also prints non-debug messages #> print me  # with global option options(\"giotto.verbose\" = TRUE) vmsg(\"Print by default\") #> Print by default  options(\"giotto.verbose\" = FALSE) vmsg(\"Do not print by default\") vmsg(\"Do not print by default\", .v = TRUE) # function level input overrides global option #> Do not print by default"},{"path":"https://drieslab.github.io/GiottoUtils/reference/wrap_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap message — wrap_msg","title":"Wrap message — wrap_msg","text":"Wrap message","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/wrap_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap message — wrap_msg","text":"","code":"wrap_msg(..., sep = \" \")"},{"path":"https://drieslab.github.io/GiottoUtils/reference/wrap_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap message — wrap_msg","text":"... additional strings /elements pass wrap_txt sep join elements string (default one space)","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/wrap_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap text — wrap_txt","title":"Wrap text — wrap_txt","text":"Wrap text","code":""},{"path":"https://drieslab.github.io/GiottoUtils/reference/wrap_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap text — wrap_txt","text":"","code":"wrap_txt(   ...,   sep = \" \",   strWidth = 100,   errWidth = FALSE,   .prefix = \" \",   .initial = \"\" )"},{"path":"https://drieslab.github.io/GiottoUtils/reference/wrap_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap text — wrap_txt","text":"... additional params pass sep join elements string (default one space) strWidth externally set wrapping width. (default value 100 effected) errWidth default = FALSE. Set strWidth compatible error printout .prefix character. prefix later lines .initial character. prefix first line","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/news/index.html","id":"added-0-1-2","dir":"Changelog","previous_headings":"","what":"Added","title":"GiottoUtils 0.1.2 (2024/01/02)","text":"Add: getMonochromeColors() basic color palette function. Useful image colorization.","code":""},{"path":[]},{"path":"https://drieslab.github.io/GiottoUtils/news/index.html","id":"breaking-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"GiottoUtils 0.1.1 (2023/12/16)","text":"Remove checkmate reexports Remove deprecated flex_lapply() Rename guard_against_notgiotto() assert_giotto() Rename set_row_order_dt() dt_set_row_order() Rename dcast_dt_string() dt_dcast_string() Rename sort_combine_two_DT_columns() dt_sort_combine_two_columns() Rename DT_removeNA() dt_remove_na() Rename assert_DT() assert_dt()","code":""},{"path":"https://drieslab.github.io/GiottoUtils/news/index.html","id":"added-0-1-1","dir":"Changelog","previous_headings":"","what":"Added","title":"GiottoUtils 0.1.1 (2023/12/16)","text":"Add gstop() framework sending module specific error messages Add str_locate2() (implementation stringr::str_locate() base R) Add str_vector() pretty printing vector string Add: str_bracket(), str_parenth(), str_quote(), str_double_quote() convenience functions Move: get_prev_fname(), get_args(), get_prev_call() package Add get_prev_call() Move basic color palettes getDistinctColors() getRainbowColors() package Add: RColorBrewer suggests getDistinctColors()","code":""},{"path":"https://drieslab.github.io/GiottoUtils/news/index.html","id":"changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"GiottoUtils 0.1.1 (2023/12/16)","text":"improvements assert_giotto()","code":""},{"path":"https://drieslab.github.io/GiottoUtils/news/index.html","id":"giottoutils-010-20231129","dir":"Changelog","previous_headings":"","what":"GiottoUtils 0.1.0 (2023/11/29)","title":"GiottoUtils 0.1.0 (2023/11/29)","text":"Initial release","code":""}]
